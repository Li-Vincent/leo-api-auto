{"version":3,"sources":["webpack:///src/components/project/cronJob/CronJobList.vue","webpack:///./src/api/cronJob.js","webpack:///./src/components/project/cronJob/CronJobList.vue?68b7","webpack:///./src/components/project/cronJob/CronJobList.vue"],"names":["CronJobList","name","data","_this","this","filters","testSuites","mailGroupList","TriggerTypes","value","size","skip","sortBy","order","pageNum","totalNum","selects","delLoading","disDel","TestStatus","listLoading","statusChangeLoading","cronJobs","testEnvs","titleMap","add","edit","dialogStatus","formVisible","editLoading","formRules","required","message","trigger","min","max","testSuiteIdList","testEnvId","alarmMailGroupList","triggerType","interval","validator","rule","callback","undefined","Error","$message","warning","center","runDate","description","form","includeForbidden","initForm","testDomain","pickerOptions","disabledDate","time","getTime","Date","now","methods","getTestEnvList","_this2","self","Object","envConfig","status","then","res","rows","error","catch","checkActiveTestEnv","length","getMailGroupList","mail","checkActiveMail","getTestSuiteList","params","projectId","$route","project_id","testSuite","checkActiveTestSuite","queryCronJobs","trim","header","request","url","method","headers","getCronJobs","getCronJobList","handleSizeChange","val","handleCurrentChange","handleDel","index","row","_this3","$confirm","type","cron_job_id","deleteCronJob","_id","success","selectsChange","update","stringToDate","dateStr","separator","dateArr","toString","split","year","parseInt","month","indexOf","substring","day","handleEdit","constructor","String","assign_default","handleAdd","submit","_this4","$refs","validate","valid","Content-Type","createUser","$store","getters","email","Number","addCronJob","resetFields","_params","lastUpdateUser","updateCronJob","sortChange","column","prop","handleChangeStatus","updateUser","console","log","pauseCronJob","resumeCronJob","triggerTypeChange","selVal","reportRowStyle","_ref","rowIndex","ReportTableRow","_ref2","created","cronJob_CronJobList","render","_vm","_h","$createElement","_c","_self","staticStyle","margin","staticClass","_v","_s","meta","title","padding-bottom","attrs","span","inline","model","nativeOn","$event","preventDefault","text-decoration","color","to","on","click","$router","back","margin-right","margin-left","float","placeholder","keyup","_k","keyCode","key","$$v","$set","expression","directives","rawName","width","row-style","row-class-name","highlight-current-row","sort-change","selection-change","min-width","label","sortable","show-overflow-tooltip","scopedSlots","_u","fn","scope","src","__webpack_require__","$index","loading","left","visible","close-on-click-modal","update:visible","ref","rules","label-width","auto-complete","clearable","multiple","visible-change","_l","item","change","_e","picker-options","slot","page-sizes","page-size","layout","total","size-change","current-change","staticRenderFns","Component","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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","file":"static/js/24.c2fd426f8a197cd7f0df.js","sourcesContent":["<template>\n  <section style=\"margin:10px 35px\">\n    <!--页面title-->\n    <strong class=\"title\">{{$route.meta.title}}</strong>\n\n    <!--工具条-->\n    <el-col :span=\"24\" class=\"toolbar\" style=\"padding-bottom: 0px;\">\n      <el-form :inline=\"true\" :model=\"filters\" @submit.native.prevent>\n        <router-link to=\"\" style=\"text-decoration: none;color: aliceblue;\">\n          <el-button class=\"return-list\" @click=\"$router.back(-1)\">\n            <i class=\"el-icon-d-arrow-left\" style=\"margin-right: 5px\"></i>返回\n          </el-button>\n        </router-link>\n        <el-form-item style=\"margin-left: 35px\">\n          <el-button class=\"el-icon-plus\" type=\"primary\" @click=\"handleAdd\"> 新增定时任务</el-button>\n        </el-form-item>\n        <div style=\"float: right; margin-right: 100px\">\n          <el-form-item>\n            <el-input v-model.trim=\"filters.name\" placeholder=\"名称\" @keyup.enter.native=\"getCronJobList\"></el-input>\n          </el-form-item>\n          <el-form-item>\n            <el-button type=\"primary\" class=\"el-icon-search\" @click=\"getCronJobList\"> 查询</el-button>\n          </el-form-item>\n        </div>\n      </el-form>\n    </el-col>\n\n    <!--定时任务列表-->\n    <el-table @sort-change='sortChange' :row-style=\"reportRowStyle\" :row-class-name=\"ReportTableRow\" :data=\"cronJobs\"\n              highlight-current-row v-loading=\"listLoading\" @selection-change=\"selectsChange\" style=\"width: 100%;\">\n      <el-table-column type=\"selection\" min-width=\"5%\">\n      </el-table-column>\n      <el-table-column prop=\"_id\" label=\"任务ID\" min-width=\"20%\" sortable='custom' show-overflow-tooltip>\n      </el-table-column>\n      <el-table-column prop=\"name\" label=\"任务名称\" min-width=\"30%\" sortable='custom' show-overflow-tooltip>\n      </el-table-column>\n      <el-table-column prop=\"description\" label=\"描述\" min-width=\"20%\" sortable='custom' show-overflow-tooltip>\n      </el-table-column>\n      <el-table-column prop=\"createAt\" label=\"创建时间\" min-width=\"25%\" sortable='custom' show-overflow-tooltip>\n      </el-table-column>\n      <el-table-column sortable='custom' prop=\"createUser\" label=\"创建者\" min-width=\"15%\" show-overflow-tooltip>\n      </el-table-column>\n      <el-table-column prop=\"lastUpdateTime\" label=\"更新时间\" min-width=\"25%\" sortable='custom' show-overflow-tooltip>\n      </el-table-column>\n      <el-table-column prop=\"lastUpdateUser\" label=\"更新者\" min-width=\"15%\" sortable='custom' show-overflow-tooltip>\n      </el-table-column>\n      <el-table-column prop=\"next_run_time\" label=\"next执行时间\" min-width=\"25%\" sortable='custom' show-overflow-tooltip>\n      </el-table-column>\n      <el-table-column prop=\"status\" label=\"状态\" min-width=\"10%\">\n        <template slot-scope=\"scope\">\n          <img v-show=\"scope.row.status!=='PAUSED'\" src=\"../../../assets/imgs/icon-yes.svg\"/>\n          <img v-show=\"scope.row.status==='PAUSED'\" src=\"../../../assets/imgs/icon-no.svg\"/>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"操作\" min-width=\"50%\">\n        <template slot-scope=\"scope\">\n          <el-button type=\"primary\" size=\"small\" @click=\"handleEdit(scope.$index, scope.row)\">编辑</el-button>\n          <el-button type=\"danger\" size=\"small\" @click=\"handleDel(scope.$index, scope.row)\">删除</el-button>\n          <el-button\n            type=\"info\"\n            size=\"small\"\n            :loading=\"statusChangeLoading\"\n            @click=\"handleChangeStatus(scope.$index, scope.row)\">\n            {{scope.row.status==='PAUSED'?'启动':'停用'}}\n          </el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <!--编辑-->\n    <el-dialog :title=\"titleMap[dialogStatus]\" :visible.sync=\"formVisible\" width=\"70%\" :close-on-click-modal=\"false\"\n               style=\"width: 65%; left: 17.5%\">\n      <el-form :model=\"form\" :rules=\"formRules\" ref=\"form\" label-width=\"100px\">\n        <el-form-item label=\"任务名称\" prop=\"name\">\n          <el-input v-model=\"form.name\" auto-complete=\"off\"></el-input>\n        </el-form-item>\n\n        <el-form-item label=\"用例组\" prop=\"testSuiteIdList\">\n          <el-select style=\"width: 60%;\" v-model=\"form.testSuiteIdList\" @visible-change=\"checkActiveTestSuite\"\n                     clearable multiple auto-complete=\"off\">\n            <el-option v-for=\"(item,index) in testSuites\" :key=\"index+''\" :label=\"item.name\"\n                       :value=\"item._id\"></el-option>\n          </el-select>\n          <el-checkbox style=\"margin-left: 50px\" label='是否执行禁用的用例(组)' v-model=\"form.includeForbidden\">\n          </el-checkbox>\n        </el-form-item>\n        <el-form-item label=\"测试环境\" prop=\"testEnvId\">\n          <el-select\n            v-model=\"form.testEnvId\"\n            @visible-change=\"checkActiveTestEnv\"\n            clearable\n            auto-complete=\"off\">\n            <el-option v-for=\"(item,index) in testEnvs\" :key=\"index\" :label=\"item.name\" :value=\"item._id\"></el-option>\n          </el-select>\n        </el-form-item>\n        <el-form-item label=\"触发类型\" prop=\"triggerType\">\n          <el-select clearable v-model.trim=\"form.triggerType\" @change=\"triggerTypeChange\" auto-complete=\"off\">\n            <el-option v-for=\"(item,index) in TriggerTypes\" :key=\"index+''\" :label=\"item.name\"\n                       :value=\"item.value\"></el-option>\n          </el-select>\n        </el-form-item>\n\n        <transition name=\"el-zoom-in-top\">\n          <div class=\"form-item-sub form-item-short\"\n               v-if=\"form.triggerType.toString()==='interval' || form.triggerType.toString()==='date'\">\n            <el-form-item v-if=\"form.triggerType.toString()==='interval'\" label=\"间隔/秒\" prop=\"interval\">\n              <el-input style=\"width:50%\" v-model.trim=\"form.interval\" type=\"number\" auto-complete=\"off\"></el-input>\n            </el-form-item>\n\n            <el-form-item v-if=\"form.triggerType.toString()==='date'\" label=\"具体日期\" prop=\"runDate\">\n              <el-date-picker\n                :picker-options=\"pickerOptions\"\n                v-model.trim=\"form.runDate\"\n                type=\"datetime\"\n                placeholder=\"请选择触发日期\">\n              </el-date-picker>\n            </el-form-item>\n          </div>\n        </transition>\n\n        <el-form-item label=\"告警邮件组\" prop=\"alarmMailGroupList\">\n          <el-select style=\"width: 60%;\" v-model=\"form['alarmMailGroupList']\" @visible-change=\"checkActiveMail\"\n                     clearable multiple placeholder=\"请选择告警报告接受者(可多选)\">\n            <el-option v-for=\"(item,index) in mailGroupList\" :key=\"index\" :label=\"item.name\"\n                       :value=\"item._id\"></el-option>\n          </el-select>\n        </el-form-item>\n\n        <el-form-item label=\"任务描述\" prop='description'>\n          <el-input type=\"textarea\" :rows=\"4\" v-model=\"form.description\"></el-input>\n        </el-form-item>\n\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click.native=\"formVisible = false\">取消</el-button>\n        <el-button type=\"primary\" @click.native=\"submit\" :loading=\"editLoading\">提交</el-button>\n      </div>\n    </el-dialog>\n\n    <!--工具条-->\n    <el-col :span=\"24\" class=\"toolbar\">\n      <el-pagination\n        style=\"float: right\"\n        @size-change=\"handleSizeChange\"\n        @current-change=\"handleCurrentChange\"\n        :page-sizes=\"[10, 20, 40]\"\n        :page-size=\"size\"\n        layout=\"total, sizes, prev, pager, next, jumper\"\n        :total=\"totalNum\">\n      </el-pagination>\n    </el-col>\n  </section>\n</template>\n\n<script>\n    import {\n        getCronJobs, addCronJob, updateCronJob, deleteCronJob, pauseCronJob, resumeCronJob\n    } from \"../../../api/cronJob\";\n    import {getEnvConfigs} from \"../../../api/envConfig\";\n    import {getTestSuites} from \"../../../api/testSuite\";\n    import {getMailGroups} from \"../../../api/mail\";\n\n    export default {\n        name: \"CronJobList\",\n        data() {\n            let checkTriggerInterval = (rule, value, callback) => {\n                if (value !== \"\" && value !== null && value !== undefined) {\n                    if (value >= 60) {\n                        callback()\n                    } else {\n                        callback(new Error('请输入大于或等于一分钟的触发间隔！'))\n                        this.$message.warning({\n                            message: '请输入大于或等于一分钟的触发间隔！',\n                            center: true,\n                        });\n                    }\n                } else {\n                    callback()\n                }\n            };\n            return {\n                filters: {\n                    name: ''\n                },\n                testSuites: [],\n                mailGroupList: [],\n                TriggerTypes: [{name: '触发间隔', value: 'interval'},\n                    {name: '具体日期', value: 'date'}],\n                size: 10,\n                skip: 0,\n                sortBy: 'createAt',\n                order: 'descending',\n                pageNum: 1,\n                totalNum: 0,\n                selects: [],//列表选中列\n                delLoading: false,\n                disDel: true,\n                TestStatus: false,\n                listLoading: false,\n                statusChangeLoading: false,\n                cronJobs: [],\n                testEnvs: [],\n\n                titleMap: {\n                    add: '新增定时任务',\n                    edit: '编辑定时任务'\n                },\n                dialogStatus: '',\n                formVisible: false,//编辑界面是否显示\n                editLoading: false,\n                formRules: {\n                    name: [\n                        {required: true, message: '请输入名称', trigger: 'blur'},\n                        {min: 1, max: 100, message: '长度在 1 到 100 个字符', trigger: 'blur'}\n                    ],\n                    testSuiteIdList: [\n                        {required: true, message: '请选择测试用例组', trigger: 'blur'}\n                    ],\n                    testEnvId: [\n                        {required: true, message: '请选择测试环境', trigger: 'blur'}\n                    ],\n                    alarmMailGroupList: [\n                        {required: false, message: '请选择告警邮件组', trigger: 'blur'}\n                    ],\n                    triggerType: [\n                        {required: true, message: '请选择触发类型', trigger: 'blur'}\n                    ],\n                    interval: [\n                        {required: false, message: '请输入触发间隔', trigger: 'blur'},\n                        {validator: checkTriggerInterval, trigger: 'blur'}\n                    ],\n                    runDate: [\n                        {required: false, message: '请输入触发时间', trigger: 'blur'}\n                    ],\n                    description: [\n                        {required: false, message: '请输入版本号', trigger: 'blur'},\n                        {max: 1024, message: '不能超过1024个字符', trigger: 'blur'}\n                    ]\n                },\n                //编辑界面数据\n                form: {\n                    name: '',\n                    testSuiteIdList: [],\n                    includeForbidden: false,\n                    testEnvId: '',\n                    alarmMailGroupList: [],\n                    triggerType: '',\n                    interval: 0,\n                    runDate: '',\n                    description: ''\n                },\n                initForm: {\n                    name: '',\n                    testSuiteIdList: [],\n                    includeForbidden: false,\n                    testDomain: '',\n                    alarmMailGroupList: [],\n                    triggerType: '',\n                    interval: 0,\n                    runDate: '',\n                    description: ''\n                },\n                pickerOptions: {\n                    disabledDate: (time) => {\n                        return time.getTime() < (Date.now() - 8.64e7)\n                    }\n                }\n            }\n        },\n        methods: {\n            getTestEnvList() {\n                let self = this;\n                let header = {};\n                let params = {status: true};\n                getEnvConfigs(params, header).then((res) => {\n                    let {status, data} = res\n                    if (status === 'ok') {\n                        this.testEnvs = data.rows\n                    } else {\n                        self.$message.error({\n                            message: data,\n                            center: true,\n                        })\n                    }\n                }).catch((error) => {\n                    self.$message.error({\n                        message: '暂时无法获取环境列表，请稍后刷新重试~',\n                        center: true,\n                    });\n                })\n            },\n            checkActiveTestEnv: function () {\n                let self = this;\n                if (self.testEnvs.length < 1) {\n                    self.$message.warning({\n                        message: '未找到「启用的测试环境」哦, 请前往「环境配置」进行设置',\n                        center: true,\n                    })\n                }\n            },\n            getMailGroupList() {\n                this.listLoading = true;\n                let self = this;\n                let params = {status: true}\n                getMailGroups(params).then((res) => {\n                    let {status, data} = res;\n                    self.listLoading = false;\n                    if (status === 'ok') {\n                        self.totalNum = data.totalNum;\n                        self.mailGroupList = data.rows\n                    } else {\n                        self.$message.error({\n                            message: data,\n                            center: true,\n                        })\n                    }\n                }).catch((error) => {\n                    self.$message.error({\n                        message: '邮件组列表获取失败，请稍后刷新重试哦~',\n                        center: true,\n                    });\n                    self.listLoading = false;\n                });\n            },\n            checkActiveMail: function () {\n                let self = this;\n                if (self.mailGroupList.length < 1) {\n                    self.$message.warning({\n                        message: '未找到「启用的邮件组」哦, 请通知管理员前往「邮件配置」进行设置',\n                        center: true,\n                    })\n                }\n            },\n            // 获取用例组列表\n            getTestSuiteList() {\n                let self = this;\n                let params = {\n                    status: true,\n                    projectId: self.$route.params.project_id\n                }\n                this.listLoading = true;\n                let header = {};\n                getTestSuites(self.$route.params.project_id, params, header).then((res) => {\n                    self.listLoading = false;\n                    let {status, data} = res;\n                    if (status === 'ok') {\n                        self.testSuites = data.rows;\n                        self.totalNum = data.totalNum;\n                    } else {\n                        self.$message.error({\n                            message: data,\n                            center: true,\n                        })\n                    }\n                }).catch((error) => {\n                    self.$message.error({\n                        message: '用例列表获取失败，请稍后刷新重试哦~',\n                        center: true,\n                    });\n                    self.listLoading = false;\n                })\n            },\n            checkActiveTestSuite: function () {\n                let self = this;\n                if (self.testSuites.length < 1) {\n                    self.$message.warning({\n                        message: '未找到「启用的测试用例组」哦, 请前往「自动化测试」进行设置',\n                        center: true,\n                    })\n                }\n            },\n            queryCronJobs(params) {\n                let self = this;\n                if (self.filters.name.trim() !== '') {\n                    params['name'] = self.filters.name.trim()\n                }\n                let header = {};\n                getCronJobs(self.$route.params.project_id, params, header).then((res) => {\n                    self.listLoading = false;\n                    let {status, data} = res;\n                    if (status === 'ok') {\n                        self.totalNum = data.totalNum;\n                        self.cronJobs = data.rows;\n                    } else {\n                        self.$message.error({\n                            message: data,\n                            center: true,\n                        })\n                    }\n                }).catch((error) => {\n                    self.$message.error({\n                        message: '定时任务列表获取失败，请稍后刷新重试哦~',\n                        center: true,\n                    });\n                    self.listLoading = false;\n                })\n            },\n            getCronJobList() {\n                this.listLoading = true;\n                let self = this\n                let params = {\n                    size: self.size, skip: self.skip, sortBy: self.sortBy, order: self.order,\n                    projectId: self.$route.params.project_id\n                };\n                this.queryCronJobs(params);\n            },\n            handleSizeChange(val) {\n                let self = this;\n                self.size = val;\n                self.listLoading = true;\n                let params = {\n                    size: self.size, skip: self.skip, sortBy: self.sortBy, order: self.order,\n                    projectId: self.$route.params.project_id\n                };\n                this.queryCronJobs(params);\n            },\n            handleCurrentChange(val) {\n                let self = this;\n                self.skip = (val - 1) * self.size;\n                self.listLoading = true;\n                let params = {\n                    size: self.size, skip: self.skip, sortBy: self.sortBy, order: self.order,\n                    projectId: self.$route.params.project_id\n                };\n                this.queryCronJobs(params);\n            },\n\n            //删除\n            handleDel: function (index, row) {\n                this.$confirm('确认删除该记录吗?', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    this.listLoading = true;\n                    let self = this;\n                    let header = {};\n                    let params = {}\n                    deleteCronJob(this.$route.params.project_id, row._id, params, header).then((res) => {\n                        let {status, data} = res;\n                        if (status === 'ok') {\n                            self.$message.success({\n                                message: data,\n                                center: true,\n                            });\n                        } else {\n                            self.$message.error({\n                                message: data,\n                                center: true,\n                            });\n                        }\n                        self.getCronJobList();\n                    });\n                })\n            },\n            selectsChange: function (selects) {\n                if (selects.length > 0) {\n                    this.selects = selects;\n                    this.update = false\n                } else {\n                    this.update = true\n                }\n            },\n            // TODO 抽出成通用方法\n            stringToDate: function (dateStr, separator) {\n                if (!separator) {\n                    separator = \"-\";\n                }\n                let dateArr = dateStr.toString().split(separator);\n                let year = parseInt(dateArr[0]);\n                let month;\n                //处理月份为04这样的情况\n                if (dateArr[1].indexOf(\"0\") == 0) {\n                    month = parseInt(dateArr[1].substring(1));\n                } else {\n                    month = parseInt(dateArr[1]);\n                }\n                let day = parseInt(dateArr[2]);\n                let date = new Date(year, month - 1, day);\n                return date;\n            },\n            //显示编辑界面\n            handleEdit: function (index, row) {\n                this.formVisible = true;\n                if (row['runDate'] && row['runDate'].constructor === String) {\n                    row['runDate'] = this.stringToDate(row['runDate'])\n                }\n                this.form = Object.assign({}, this.form, row);\n                this.dialogStatus = 'edit'\n            },\n            //显示新增界面\n            handleAdd: function () {\n                this.formVisible = true;\n                this.form = Object.assign({}, this.form, this.initForm);\n                this.dialogStatus = 'add';\n            },\n\n            submit() {\n                this.$refs.form.validate((valid) => {\n                    let self = this;\n                    if (valid) {\n                        if (!(self.form.runDate && self.form.runDate.toString().trim() !== '') &&\n                            !(self.form.interval && self.form.interval.toString().trim() !== '')) {\n                            if (self.form.triggerType === 'interval')\n                                self.$message.warning({\n                                    message: '请输入触发间隔',\n                                    center: true,\n                                })\n                            else if (self.form.triggerType === 'date') {\n                                self.$message.warning({\n                                    message: '请输入具体日期',\n                                    center: true,\n                                })\n                            }\n                        } else if (self.form.triggerType === 'date' && self.form.runDate < Date.now()) {\n                            self.$message.warning({\n                                message: '人生不能重来哦 ~ 请输入「此刻」以后的日期',\n                                center: true,\n                            })\n                        } else {\n                            this.$confirm('确认提交吗？', '提示', {}).then(() => {\n                                self.editLoading = true;\n                                let headers = {\n                                    \"Content-Type\": \"application/json\",\n                                };\n                                if (this.dialogStatus == 'add') {\n                                    let params = {\n                                        name: self.form.name.trim(),\n                                        testSuiteIdList: self.form.testSuiteIdList,\n                                        testEnvId: self.form.testEnvId,\n                                        includeForbidden: self.form.includeForbidden,\n                                        triggerType: self.form.triggerType,\n                                        description: self.form.description.trim(),\n                                        alarmMailGroupList: self.form.alarmMailGroupList,\n                                        createUser: self.$store.getters.email || 'anonymous',\n                                    };\n                                    if (self.form.runDate && self.form.runDate.toString().trim() !== '') {\n                                        params['runDate'] = self.form.runDate\n                                    }\n                                    if (self.form.interval && self.form.interval.toString().trim() !== '') {\n                                        params['interval'] = Number(self.form.interval)\n                                    }\n                                    addCronJob(self.$route.params.project_id, params, headers).then((res) => {\n                                        self.editLoading = false;\n                                        let {status, data} = res;\n                                        if (status === 'ok') {\n                                            self.formVisible = false\n                                            self.$message.success({\n                                                message: '添加成功',\n                                                center: true,\n                                            });\n                                            self.$refs['form'].resetFields();\n                                            self.formVisible = false;\n                                            self.getCronJobList();\n                                        } else {\n                                            self.formVisible = false\n                                            self.$message.error({\n                                                message: data,\n                                                center: true,\n                                            })\n                                            self.$refs['form'].resetFields();\n                                            self.formVisible = false;\n                                            self.getCronJobList()\n                                        }\n                                    });\n                                } else if (this.dialogStatus == 'edit') {\n                                    let params = {\n                                        name: self.form.name.trim(),\n                                        testSuiteIdList: self.form.testSuiteIdList,\n                                        testEnvId: self.form.testEnvId,\n                                        includeForbidden: self.form.includeForbidden,\n                                        triggerType: self.form.triggerType,\n                                        description: self.form.description.trim(),\n                                        alarmMailGroupList: self.form.alarmMailGroupList,\n                                        lastUpdateUser: self.$store.getters.email || 'anonymous',\n                                    };\n                                    if (self.form.runDate && self.form.runDate.toString().trim() !== '') {\n                                        params['runDate'] = self.form.runDate\n                                    }\n                                    if (self.form.interval && self.form.interval.toString().trim() !== '') {\n                                        params['interval'] = Number(self.form.interval)\n                                    }\n                                    updateCronJob(self.$route.params.project_id, self.form._id, params, headers).then((res) => {\n                                        self.editLoading = false;\n                                        let {status, data} = res;\n                                        if (status === 'ok') {\n                                            self.formVisible = false\n                                            self.$message.success({\n                                                message: '更新成功',\n                                                center: true,\n                                            });\n                                            self.$refs['form'].resetFields();\n                                            self.formVisible = false;\n                                            self.getCronJobList();\n                                        } else {\n                                            self.formVisible = false\n                                            self.$message.error({\n                                                message: data,\n                                                center: true,\n                                            })\n                                            self.$refs['form'].resetFields();\n                                            self.formVisible = false;\n                                            self.getCronJobList()\n                                        }\n                                    });\n                                }\n                            });\n                        }\n                    }\n                });\n            },\n            //排序\n            sortChange(column) {\n                let self = this;\n                self.listLoading = true;\n                self.sortBy = column.prop;\n                self.order = column.order;\n                let params = {\n                    size: self.size, skip: self.skip, sortBy: self.sortBy, order: self.order,\n                    projectId: self.$route.params.project_id\n                };\n                this.queryCronJobs(params);\n            },\n            handleChangeStatus(index, row) {\n                let self = this;\n                self.statusChangeLoading = true;\n                let header = {};\n                let params = {\n                    updateUser: self.$store.getters.email\n                };\n                console.log(row.status)\n                if (row.status !== 'PAUSED') {\n                    pauseCronJob(self.$route.params.project_id, row._id, params, header).then((res) => {\n                        self.statusChangeLoading = false;\n                        let {status, data} = res;\n                        if (status === 'ok') {\n                            self.$message.success({\n                                message: data,\n                                center: true,\n                            });\n                        } else {\n                            self.$message.error({\n                                message: data,\n                                center: true,\n                            });\n                        }\n                        self.getCronJobList();\n                    }).catch((error) => {\n                        self.$message.error({\n                            message: '定时任务状态变更失败，请稍后刷新重试哦~',\n                            center: true,\n                        });\n                        self.statusChangeLoading = false;\n                    })\n                } else {\n                    resumeCronJob(self.$route.params.project_id, row._id, params, header).then((res) => {\n                        self.statusChangeLoading = false;\n                        let {status, data} = res;\n                        if (status === 'ok') {\n                            self.$message.success({\n                                message: data,\n                                center: true,\n                            });\n                        } else {\n                            self.$message.error({\n                                message: data,\n                                center: true,\n                            });\n                        }\n                        self.getCronJobList();\n                    }).catch((error) => {\n                        self.$message.error({\n                            message: '定时任务状态变更失败，请稍后刷新重试哦~',\n                            center: true,\n                        });\n                        self.statusChangeLoading = false;\n                        self.getCronJobList();\n                    })\n                }\n            },\n\n            triggerTypeChange(selVal) {\n                if (selVal === 'interval') {\n                    this.form.runDate = ''\n                } else if (selVal === 'date') {\n                    this.form.interval = ''\n                }\n            },\n            // 修改table tr行的背景色\n            reportRowStyle({row, rowIndex}) {\n                if (row.status === 'PAUSED')\n                    return 'background-color: #DDDDDD'\n                else {\n                    return ''\n                }\n            },\n            ReportTableRow({row, rowIndex}) {\n                return 'reportTableRow';\n            },\n        },\n        created() {\n            this.getTestEnvList();\n            this.getCronJobList();\n            this.getMailGroupList();\n            this.getTestSuiteList();\n        }\n    }\n</script>\n\n\n<style lang=\"scss\" scoped>\n  .title {\n    width: 200px;\n    float: left;\n    color: #475669;\n    font-size: 25px;\n    margin: 10px 5px;\n    font-family: Arial;\n  }\n\n  .return-list {\n    margin-top: 0px;\n    margin-bottom: 10px;\n    margin-left: 20px;\n    border-radius: 25px;\n  }\n\n  .sub-form-item {\n    padding-left: 40px;\n  }\n\n  .form-item-sub {\n    position: relative;\n    background-color: #f5f7fa;\n    padding: 10px 0;\n    margin-bottom: 10px;\n    border-radius: 4px;\n    box-shadow: inset 0 0 3px 0px #7c7c7c61;\n  }\n\n  .form-item-sub::before {\n    position: absolute;\n    content: '';\n    display: block;\n    width: 0;\n    height: 0;\n    top: -8px;\n    left: 220px;\n    border-bottom: 8px solid #ecedef;\n    border-left: 8px solid transparent;\n    border-right: 8px solid transparent;\n    border-top: 0px solid transparent;\n  }\n\n  .form-item-short > > > .el-form-item__content {\n    margin-left: 100px !important;\n  }\n\n  .form-item-short > > > .el-input {\n    margin: 0 10px;\n  }\n\n  .el-form-item:last-child {\n    margin-bottom: 0;\n  }\n\n  ::-webkit-scrollbar {\n    display: none;\n  }\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/project/cronJob/CronJobList.vue","import request from '../utils/axios'\n\nexport function getCronJobs(project_id, params, header) {\n  return request({\n    url: `/api/project/${project_id}/cronJobList`,\n    method: 'GET',\n    headers: header,\n    params: params\n  })\n}\n\nexport function addCronJob(project_id, params, header) {\n  return request({\n    url: `/api/project/${project_id}/addCronJob`,\n    method: 'POST',\n    headers: header,\n    data: params\n  })\n}\n\nexport function updateCronJob(project_id, cron_job_id, params, header) {\n  return request({\n    url: `/api/project/${project_id}/updateCronJob/${cron_job_id}`,\n    method: 'POST',\n    headers: header,\n    data: params\n  })\n}\n\nexport function pauseCronJob(project_id, cron_job_id, params, header) {\n  return request({\n    url: `/api/project/${project_id}/pauseCronJob/${cron_job_id}`,\n    method: 'POST',\n    headers: header,\n    data: params\n  })\n}\n\nexport function deleteCronJob(project_id, cron_job_id, params, header) {\n  return request({\n    url: `/api/project/${project_id}/deleteCronJob/${cron_job_id}`,\n    method: 'POST',\n    headers: header,\n    data: params\n  })\n}\n\nexport function resumeCronJob(project_id, cron_job_id, params, header) {\n  return request({\n    url: `/api/project/${project_id}/resumeCronJob/${cron_job_id}`,\n    method: 'POST',\n    headers: header,\n    data: params\n  })\n}\n\nexport function startScheduler(project_id, params, header) {\n  return request({\n    url: `/api/project/${project_id}/cronJob/start`,\n    method: 'POST',\n    headers: header,\n    data: params\n  })\n}\n\nexport function shutdownScheduler(project_id, params, header) {\n  return request({\n    url: `/api/project/${project_id}/cronJob/shutdown`,\n    method: 'POST',\n    headers: header,\n    data: params\n  })\n}\n\n\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/api/cronJob.js","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('section',{staticStyle:{\"margin\":\"10px 35px\"}},[_c('strong',{staticClass:\"title\"},[_vm._v(_vm._s(_vm.$route.meta.title))]),_vm._v(\" \"),_c('el-col',{staticClass:\"toolbar\",staticStyle:{\"padding-bottom\":\"0px\"},attrs:{\"span\":24}},[_c('el-form',{attrs:{\"inline\":true,\"model\":_vm.filters},nativeOn:{\"submit\":function($event){$event.preventDefault();}}},[_c('router-link',{staticStyle:{\"text-decoration\":\"none\",\"color\":\"aliceblue\"},attrs:{\"to\":\"\"}},[_c('el-button',{staticClass:\"return-list\",on:{\"click\":function($event){return _vm.$router.back(-1)}}},[_c('i',{staticClass:\"el-icon-d-arrow-left\",staticStyle:{\"margin-right\":\"5px\"}}),_vm._v(\"返回\\n        \")])],1),_vm._v(\" \"),_c('el-form-item',{staticStyle:{\"margin-left\":\"35px\"}},[_c('el-button',{staticClass:\"el-icon-plus\",attrs:{\"type\":\"primary\"},on:{\"click\":_vm.handleAdd}},[_vm._v(\" 新增定时任务\")])],1),_vm._v(\" \"),_c('div',{staticStyle:{\"float\":\"right\",\"margin-right\":\"100px\"}},[_c('el-form-item',[_c('el-input',{attrs:{\"placeholder\":\"名称\"},nativeOn:{\"keyup\":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,\"enter\",13,$event.key,\"Enter\")){ return null; }return _vm.getCronJobList($event)}},model:{value:(_vm.filters.name),callback:function ($$v) {_vm.$set(_vm.filters, \"name\", (typeof $$v === 'string'? $$v.trim(): $$v))},expression:\"filters.name\"}})],1),_vm._v(\" \"),_c('el-form-item',[_c('el-button',{staticClass:\"el-icon-search\",attrs:{\"type\":\"primary\"},on:{\"click\":_vm.getCronJobList}},[_vm._v(\" 查询\")])],1)],1)],1)],1),_vm._v(\" \"),_c('el-table',{directives:[{name:\"loading\",rawName:\"v-loading\",value:(_vm.listLoading),expression:\"listLoading\"}],staticStyle:{\"width\":\"100%\"},attrs:{\"row-style\":_vm.reportRowStyle,\"row-class-name\":_vm.ReportTableRow,\"data\":_vm.cronJobs,\"highlight-current-row\":\"\"},on:{\"sort-change\":_vm.sortChange,\"selection-change\":_vm.selectsChange}},[_c('el-table-column',{attrs:{\"type\":\"selection\",\"min-width\":\"5%\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"_id\",\"label\":\"任务ID\",\"min-width\":\"20%\",\"sortable\":\"custom\",\"show-overflow-tooltip\":\"\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"name\",\"label\":\"任务名称\",\"min-width\":\"30%\",\"sortable\":\"custom\",\"show-overflow-tooltip\":\"\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"description\",\"label\":\"描述\",\"min-width\":\"20%\",\"sortable\":\"custom\",\"show-overflow-tooltip\":\"\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"createAt\",\"label\":\"创建时间\",\"min-width\":\"25%\",\"sortable\":\"custom\",\"show-overflow-tooltip\":\"\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"sortable\":\"custom\",\"prop\":\"createUser\",\"label\":\"创建者\",\"min-width\":\"15%\",\"show-overflow-tooltip\":\"\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"lastUpdateTime\",\"label\":\"更新时间\",\"min-width\":\"25%\",\"sortable\":\"custom\",\"show-overflow-tooltip\":\"\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"lastUpdateUser\",\"label\":\"更新者\",\"min-width\":\"15%\",\"sortable\":\"custom\",\"show-overflow-tooltip\":\"\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"next_run_time\",\"label\":\"next执行时间\",\"min-width\":\"25%\",\"sortable\":\"custom\",\"show-overflow-tooltip\":\"\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"status\",\"label\":\"状态\",\"min-width\":\"10%\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [_c('img',{directives:[{name:\"show\",rawName:\"v-show\",value:(scope.row.status!=='PAUSED'),expression:\"scope.row.status!=='PAUSED'\"}],attrs:{\"src\":require(\"../../../assets/imgs/icon-yes.svg\")}}),_vm._v(\" \"),_c('img',{directives:[{name:\"show\",rawName:\"v-show\",value:(scope.row.status==='PAUSED'),expression:\"scope.row.status==='PAUSED'\"}],attrs:{\"src\":require(\"../../../assets/imgs/icon-no.svg\")}})]}}])}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"label\":\"操作\",\"min-width\":\"50%\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [_c('el-button',{attrs:{\"type\":\"primary\",\"size\":\"small\"},on:{\"click\":function($event){return _vm.handleEdit(scope.$index, scope.row)}}},[_vm._v(\"编辑\")]),_vm._v(\" \"),_c('el-button',{attrs:{\"type\":\"danger\",\"size\":\"small\"},on:{\"click\":function($event){return _vm.handleDel(scope.$index, scope.row)}}},[_vm._v(\"删除\")]),_vm._v(\" \"),_c('el-button',{attrs:{\"type\":\"info\",\"size\":\"small\",\"loading\":_vm.statusChangeLoading},on:{\"click\":function($event){return _vm.handleChangeStatus(scope.$index, scope.row)}}},[_vm._v(\"\\n          \"+_vm._s(scope.row.status==='PAUSED'?'启动':'停用')+\"\\n        \")])]}}])})],1),_vm._v(\" \"),_c('el-dialog',{staticStyle:{\"width\":\"65%\",\"left\":\"17.5%\"},attrs:{\"title\":_vm.titleMap[_vm.dialogStatus],\"visible\":_vm.formVisible,\"width\":\"70%\",\"close-on-click-modal\":false},on:{\"update:visible\":function($event){_vm.formVisible=$event}}},[_c('el-form',{ref:\"form\",attrs:{\"model\":_vm.form,\"rules\":_vm.formRules,\"label-width\":\"100px\"}},[_c('el-form-item',{attrs:{\"label\":\"任务名称\",\"prop\":\"name\"}},[_c('el-input',{attrs:{\"auto-complete\":\"off\"},model:{value:(_vm.form.name),callback:function ($$v) {_vm.$set(_vm.form, \"name\", $$v)},expression:\"form.name\"}})],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"用例组\",\"prop\":\"testSuiteIdList\"}},[_c('el-select',{staticStyle:{\"width\":\"60%\"},attrs:{\"clearable\":\"\",\"multiple\":\"\",\"auto-complete\":\"off\"},on:{\"visible-change\":_vm.checkActiveTestSuite},model:{value:(_vm.form.testSuiteIdList),callback:function ($$v) {_vm.$set(_vm.form, \"testSuiteIdList\", $$v)},expression:\"form.testSuiteIdList\"}},_vm._l((_vm.testSuites),function(item,index){return _c('el-option',{key:index+'',attrs:{\"label\":item.name,\"value\":item._id}})}),1),_vm._v(\" \"),_c('el-checkbox',{staticStyle:{\"margin-left\":\"50px\"},attrs:{\"label\":\"是否执行禁用的用例(组)\"},model:{value:(_vm.form.includeForbidden),callback:function ($$v) {_vm.$set(_vm.form, \"includeForbidden\", $$v)},expression:\"form.includeForbidden\"}})],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"测试环境\",\"prop\":\"testEnvId\"}},[_c('el-select',{attrs:{\"clearable\":\"\",\"auto-complete\":\"off\"},on:{\"visible-change\":_vm.checkActiveTestEnv},model:{value:(_vm.form.testEnvId),callback:function ($$v) {_vm.$set(_vm.form, \"testEnvId\", $$v)},expression:\"form.testEnvId\"}},_vm._l((_vm.testEnvs),function(item,index){return _c('el-option',{key:index,attrs:{\"label\":item.name,\"value\":item._id}})}),1)],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"触发类型\",\"prop\":\"triggerType\"}},[_c('el-select',{attrs:{\"clearable\":\"\",\"auto-complete\":\"off\"},on:{\"change\":_vm.triggerTypeChange},model:{value:(_vm.form.triggerType),callback:function ($$v) {_vm.$set(_vm.form, \"triggerType\", (typeof $$v === 'string'? $$v.trim(): $$v))},expression:\"form.triggerType\"}},_vm._l((_vm.TriggerTypes),function(item,index){return _c('el-option',{key:index+'',attrs:{\"label\":item.name,\"value\":item.value}})}),1)],1),_vm._v(\" \"),_c('transition',{attrs:{\"name\":\"el-zoom-in-top\"}},[(_vm.form.triggerType.toString()==='interval' || _vm.form.triggerType.toString()==='date')?_c('div',{staticClass:\"form-item-sub form-item-short\"},[(_vm.form.triggerType.toString()==='interval')?_c('el-form-item',{attrs:{\"label\":\"间隔/秒\",\"prop\":\"interval\"}},[_c('el-input',{staticStyle:{\"width\":\"50%\"},attrs:{\"type\":\"number\",\"auto-complete\":\"off\"},model:{value:(_vm.form.interval),callback:function ($$v) {_vm.$set(_vm.form, \"interval\", (typeof $$v === 'string'? $$v.trim(): $$v))},expression:\"form.interval\"}})],1):_vm._e(),_vm._v(\" \"),(_vm.form.triggerType.toString()==='date')?_c('el-form-item',{attrs:{\"label\":\"具体日期\",\"prop\":\"runDate\"}},[_c('el-date-picker',{attrs:{\"picker-options\":_vm.pickerOptions,\"type\":\"datetime\",\"placeholder\":\"请选择触发日期\"},model:{value:(_vm.form.runDate),callback:function ($$v) {_vm.$set(_vm.form, \"runDate\", (typeof $$v === 'string'? $$v.trim(): $$v))},expression:\"form.runDate\"}})],1):_vm._e()],1):_vm._e()]),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"告警邮件组\",\"prop\":\"alarmMailGroupList\"}},[_c('el-select',{staticStyle:{\"width\":\"60%\"},attrs:{\"clearable\":\"\",\"multiple\":\"\",\"placeholder\":\"请选择告警报告接受者(可多选)\"},on:{\"visible-change\":_vm.checkActiveMail},model:{value:(_vm.form['alarmMailGroupList']),callback:function ($$v) {_vm.$set(_vm.form, 'alarmMailGroupList', $$v)},expression:\"form['alarmMailGroupList']\"}},_vm._l((_vm.mailGroupList),function(item,index){return _c('el-option',{key:index,attrs:{\"label\":item.name,\"value\":item._id}})}),1)],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"任务描述\",\"prop\":\"description\"}},[_c('el-input',{attrs:{\"type\":\"textarea\",\"rows\":4},model:{value:(_vm.form.description),callback:function ($$v) {_vm.$set(_vm.form, \"description\", $$v)},expression:\"form.description\"}})],1)],1),_vm._v(\" \"),_c('div',{staticClass:\"dialog-footer\",attrs:{\"slot\":\"footer\"},slot:\"footer\"},[_c('el-button',{nativeOn:{\"click\":function($event){_vm.formVisible = false}}},[_vm._v(\"取消\")]),_vm._v(\" \"),_c('el-button',{attrs:{\"type\":\"primary\",\"loading\":_vm.editLoading},nativeOn:{\"click\":function($event){return _vm.submit($event)}}},[_vm._v(\"提交\")])],1)],1),_vm._v(\" \"),_c('el-col',{staticClass:\"toolbar\",attrs:{\"span\":24}},[_c('el-pagination',{staticStyle:{\"float\":\"right\"},attrs:{\"page-sizes\":[10, 20, 40],\"page-size\":_vm.size,\"layout\":\"total, sizes, prev, pager, next, jumper\",\"total\":_vm.totalNum},on:{\"size-change\":_vm.handleSizeChange,\"current-change\":_vm.handleCurrentChange}})],1)],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-091329b2\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/project/cronJob/CronJobList.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-091329b2\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!sass-loader?{\\\"sourceMap\\\":true}!sass-resources-loader?{\\\"resources\\\":\\\"D:\\\\\\\\PycharmProjects\\\\\\\\leo-api-auto\\\\\\\\frontend\\\\\\\\element-variables.scss\\\"}!../../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./CronJobList.vue\")\n}\nvar normalizeComponent = require(\"!../../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./CronJobList.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./CronJobList.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-091329b2\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../../node_modules/vue-loader/lib/selector?type=template&index=0!./CronJobList.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-091329b2\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/project/cronJob/CronJobList.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}